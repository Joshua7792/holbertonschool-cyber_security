require 'msf/core'

class MetasploitModule < Msf::Auxiliary

  include Msf::Exploit::Remote::Tcp
  include Msf::Auxiliary::Scanner

  def initialize
    super(
      'Name'        => 'Custom Port Scanner',
      'Description' => 'Scans a range of ports on a target and lists open ports',
      'Author'      => ['Joshua Santiago'],
      'License'     => MSF_LICENSE
    )

    register_options(
      [
        Opt::RHOST(),
        OptInt.new('STARTPORT', [true, 'Start of port range to scan', 20]),
        OptInt.new('ENDPORT', [true, 'End of port range to scan', 1000])
      ]
    )
  end

  def run_host(ip)
    start_port = datastore['STARTPORT']
    end_port   = datastore['ENDPORT']
    open_ports = []

    (start_port..end_port).each do |port|
      begin
        ::Timeout.timeout(1) do
          connect(true, { 'RHOST' => ip, 'RPORT' => port })
          print_good("#{ip}:#{port} - Port #{port} is open on #{ip}")
          open_ports << port
        end
      rescue ::Interrupt
        raise $!
      rescue ::Exception
        # Ignore closed ports silently
      ensure
        disconnect
      end
    end

    if open_ports.any?
      print_status("Open ports on #{ip}: #{open_ports.join(', ')}")
    else
      print_status("No open ports found on #{ip} between ports #{start_port} and #{end_port}")
    end
  end
end